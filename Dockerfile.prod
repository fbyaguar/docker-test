###########
# BUILDER #
###########

# pull official base image
FROM python:3.8 as builder

# set work directory
WORKDIR /usr/src/test-drf

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apt-get update \
    && apt-get install netcat -y
RUN apt-get upgrade -y && apt-get install postgresql gcc python3-dev musl-dev -y

# lint
RUN pip install --upgrade pip
#RUN pip install flake8==3.9.2
COPY . .
#RUN flake8 --ignore=E501,F401 .

# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/test-drf/wheels -r requirements.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.8

# create directory for the app user
RUN mkdir -p /home/test-drf

RUN apt-get update \
    && apt-get install netcat -y
RUN apt-get upgrade -y && apt-get install postgresql gcc python3-dev musl-dev -y

# Create a user group
RUN addgroup test-drf-group

# Create a user
RUN useradd -ms /bin/bash  test-drf

# Chown all the files to the app user.
#RUN chown -R test-drf:test-drf-group /usr/src/

# create the appropriate directories
ENV HOME=/home/test-drf
ENV APP_HOME=/home/test-drf/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
WORKDIR $APP_HOME

# install dependencies
RUN apt-get update && apt-get install libpq-dev
COPY --from=builder /usr/src/test-drf/wheels /wheels
COPY --from=builder /usr/src/test-drf/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN chmod +x  $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R test-drf:test-drf-group $APP_HOME

# change to the app user
USER test-drf

# run entrypoint.prod.sh
ENTRYPOINT [ "sh", "entrypoint.prod.sh" ]
